import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { ToastService } from '../toast.service';
import { ToastType } from '../toast-type';
import * as i0 from "@angular/core";
import * as i1 from "../toast.service";
import * as i2 from "../toastify-toast/toastify-toast.component";
import * as i3 from "@angular/common";
export class ToastifyToastContainerComponent {
    constructor(_toastService, _cd) {
        this._toastService = _toastService;
        this._cd = _cd;
        this.transitionDurations = 400;
        this.position = 'top-right';
        this.transition = 'bounce';
        this.autoClose = 5000;
        this.hideProgressBar = false;
        this.pauseOnHover = true;
        this.pauseOnVisibilityChange = true;
        this.closeOnClick = true;
        this.newestOnTop = false;
        this.preventDuplicates = false;
        this.iconLibrary = 'none';
        this.ToastType = ToastType;
        this.toasts = new Array();
        this.toastTransitionDict = {};
    }
    ngOnChanges() {
        this._cd.markForCheck();
    }
    dismiss(toast) {
        this.toastTransitionDict[toast.id] = TransitionState.exiting;
        setTimeout(() => {
            const index = this.toasts.indexOf(toast);
            this.toasts.splice(index, 1);
            this._cd.markForCheck();
        }, this.transitionDurations);
    }
    getClass(toast) {
        let base = `toast toast--${ToastType[toast.type]} `;
        const state = this.toastTransitionDict[toast.id];
        if (state === TransitionState.entering) {
            base += `${this.transition}-enter ${this.transition}-enter--${this.position}`;
        }
        else if (state === TransitionState.exiting) {
            base += `${this.transition}-exit ${this.transition}-exit--${this.position}`;
        }
        return base;
    }
    ngOnInit() {
        this._toastService.dismissAllEvent.subscribe(() => {
            this.toasts = new Array();
            this._cd.markForCheck();
        });
        this._toastService.toastAddedEvent.subscribe((toast) => this.handleToastAddedEvent(toast));
    }
    handleToastAddedEvent(toast) {
        // If "preventDuplicates" is enabled, toast is not added if one toast with same message exists
        // The only thing to do is to update the toast time to keep it visible
        if (this.preventDuplicates === true) {
            const sameToast = this.toasts.find((existingToast) => existingToast.message === toast.message);
            if (sameToast) {
                sameToast.$resetToast.next();
                this._cd.markForCheck();
                return;
            }
        }
        // Add new toast transition
        this.toastTransitionDict[toast.id] = TransitionState.entering;
        setTimeout(() => {
            this.toastTransitionDict[toast.id] = TransitionState.noTransition;
            this._cd.markForCheck();
        }, this.transitionDurations);
        // Add new toast
        if (this.newestOnTop) {
            this.toasts.unshift(toast);
        }
        else {
            this.toasts.push(toast);
        }
        this._cd.markForCheck();
    }
}
/** @nocollapse */ ToastifyToastContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ToastifyToastContainerComponent, deps: [{ token: i1.ToastService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ToastifyToastContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ToastifyToastContainerComponent, selector: "lib-toastify-toast-container", inputs: { position: "position", transition: "transition", autoClose: "autoClose", hideProgressBar: "hideProgressBar", pauseOnHover: "pauseOnHover", pauseOnVisibilityChange: "pauseOnVisibilityChange", closeOnClick: "closeOnClick", newestOnTop: "newestOnTop", preventDuplicates: "preventDuplicates", iconLibrary: "iconLibrary" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"toast-container toast-container--{{position}}\">\n    <lib-toastify-toast *ngFor=\"let toast of toasts\" [class]=\"getClass(toast)\" style=\"animation-fill-mode: both; animation-duration: 0.75s\"\n        [autoClose]=\"autoClose\" [toast]=\"toast\" (dismissEvent)=\"dismiss(toast)\" [hideProgressBar]=\"hideProgressBar\" [pauseOnHover]=\"pauseOnHover\"\n        [pauseOnVisibilityChange]=\"pauseOnVisibilityChange\" [closeOnClick]=\"closeOnClick\" [iconLibrary]=\"iconLibrary\">\n    </lib-toastify-toast>\n</div>", styles: [".toast-container{z-index:9999;-webkit-transform:translateZ(9999px);position:fixed;padding:4px;width:320px;box-sizing:border-box;color:#fff}.toast-container--top-left{top:1em;left:1em}.toast-container--top-center{top:1em;left:50%;margin-left:-160px}.toast-container--top-right{top:1em;right:1em}.toast-container--bottom-left{bottom:1em;left:1em}.toast-container--bottom-center{bottom:1em;left:50%;margin-left:-160px}.toast-container--bottom-right{bottom:1em;right:1em}@media only screen and (max-width:480px){.toast-container{width:100vw;padding:0;left:0;margin:0}.toast-container--top-center,.toast-container--top-left,.toast-container--top-right{top:0}.toast-container--bottom-center,.toast-container--bottom-left,.toast-container--bottom-right{bottom:0}.toast-container--rtl{right:0;left:auto}}.toast{position:relative;min-height:64px;box-sizing:border-box;margin-bottom:1rem;padding:8px;border-radius:1px;box-shadow:0 1px 10px 0 rgba(0,0,0,.1),0 2px 15px 0 rgba(0,0,0,.05);display:flex;justify-content:space-between;max-height:800px;overflow:hidden;font-family:sans-serif;cursor:pointer;direction:ltr}.toast--rtl{direction:rtl}.toast--default{background:#fff;color:#aaa}.toast--info{background:#3498db}.toast--success{background:#07bc0c}.toast--warning{background:#f1c40f}.toast--error{background:#e74c3c}.toast-body{margin:auto 0;flex:1}@media only screen and (max-width:480px){.toast{margin-bottom:0}}@keyframes bounceInRight{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(3000px,0,0)}60%{opacity:1;transform:translate3d(-25px,0,0)}75%{transform:translate3d(10px,0,0)}90%{transform:translate3d(-5px,0,0)}to{transform:none}}@keyframes bounceOutRight{20%{opacity:1;transform:translate3d(-20px,0,0)}to{opacity:0;transform:translate3d(2000px,0,0)}}@keyframes bounceInLeft{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(-3000px,0,0)}60%{opacity:1;transform:translate3d(25px,0,0)}75%{transform:translate3d(-10px,0,0)}90%{transform:translate3d(5px,0,0)}to{transform:none}}@keyframes bounceOutLeft{20%{opacity:1;transform:translate3d(20px,0,0)}to{opacity:0;transform:translate3d(-2000px,0,0)}}@keyframes bounceInUp{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(0,3000px,0)}60%{opacity:1;transform:translate3d(0,-20px,0)}75%{transform:translate3d(0,10px,0)}90%{transform:translate3d(0,-5px,0)}to{transform:translateZ(0)}}@keyframes bounceOutUp{20%{transform:translate3d(0,-10px,0)}40%,45%{opacity:1;transform:translate3d(0,20px,0)}to{opacity:0;transform:translate3d(0,-2000px,0)}}@keyframes bounceInDown{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(0,-3000px,0)}60%{opacity:1;transform:translate3d(0,25px,0)}75%{transform:translate3d(0,-10px,0)}90%{transform:translate3d(0,5px,0)}to{transform:none}}@keyframes bounceOutDown{20%{transform:translate3d(0,10px,0)}40%,45%{opacity:1;transform:translate3d(0,-20px,0)}to{opacity:0;transform:translate3d(0,2000px,0)}}.bounce-enter--bottom-left,.bounce-enter--top-left{animation-name:bounceInLeft}.bounce-enter--bottom-right,.bounce-enter--top-right{animation-name:bounceInRight}.bounce-enter--top-center{animation-name:bounceInDown}.bounce-enter--bottom-center{animation-name:bounceInUp}.bounce-exit--bottom-left,.bounce-exit--top-left{animation-name:bounceOutLeft}.bounce-exit--bottom-right,.bounce-exit--top-right{animation-name:bounceOutRight}.bounce-exit--top-center{animation-name:bounceOutUp}.bounce-exit--bottom-center{animation-name:bounceOutDown}@keyframes zoomIn{0%{opacity:0;transform:scale3d(.3,.3,.3)}50%{opacity:1}}@keyframes zoomOut{0%{opacity:1}50%{opacity:0;transform:scale3d(.3,.3,.3)}to{opacity:0}}.zoom-enter{animation-name:zoomIn}.zoom-exit{animation-name:zoomOut}@keyframes flipIn{0%{transform:perspective(400px) rotateX(90deg);animation-timing-function:ease-in;opacity:0}40%{transform:perspective(400px) rotateX(-20deg);animation-timing-function:ease-in}60%{transform:perspective(400px) rotateX(10deg);opacity:1}80%{transform:perspective(400px) rotateX(-5deg)}to{transform:perspective(400px)}}@keyframes flipOut{0%{transform:perspective(400px)}30%{transform:perspective(400px) rotateX(-20deg);opacity:1}to{transform:perspective(400px) rotateX(90deg);opacity:0}}.flip-enter{animation-name:flipIn}.flip-exit{animation-name:flipOut}@keyframes slideInRight{0%{transform:translate3d(110%,0,0);visibility:visible}to{transform:translateZ(0)}}@keyframes slideInLeft{0%{transform:translate3d(-110%,0,0);visibility:visible}to{transform:translateZ(0)}}@keyframes slideInUp{0%{transform:translate3d(0,110%,0);visibility:visible}to{transform:translateZ(0)}}@keyframes slideInDown{0%{transform:translate3d(0,-110%,0);visibility:visible}to{transform:translateZ(0)}}@keyframes slideOutRight{0%{transform:translateZ(0)}to{visibility:hidden;transform:translate3d(110%,0,0)}}@keyframes slideOutLeft{0%{transform:translateZ(0)}to{visibility:hidden;transform:translate3d(-110%,0,0)}}@keyframes slideOutDown{0%{transform:translateZ(0)}to{visibility:hidden;transform:translate3d(0,500px,0)}}@keyframes slideOutUp{0%{transform:translateZ(0)}to{visibility:hidden;transform:translate3d(0,-500px,0)}}.slide-enter--bottom-left,.slide-enter--top-left{animation-name:slideInLeft}.slide-enter--bottom-right,.slide-enter--top-right{animation-name:slideInRight}.slide-enter--top-center{animation-name:slideInDown}.slide-enter--bottom-center{animation-name:slideInUp}.slide-exit--bottom-left,.slide-exit--top-left{animation-name:slideOutLeft}.slide-exit--bottom-right,.slide-exit--top-right{animation-name:slideOutRight}.slide-exit--top-center{animation-name:slideOutUp}.slide-exit--bottom-center{animation-name:slideOutDown}"], components: [{ type: i2.ToastifyToastComponent, selector: "lib-toastify-toast", inputs: ["autoClose", "hideProgressBar", "pauseOnHover", "pauseOnVisibilityChange", "closeOnClick", "toast", "iconLibrary"], outputs: ["dismissEvent"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ToastifyToastContainerComponent, decorators: [{
            type: Component,
            args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'lib-toastify-toast-container',
                    templateUrl: './toastify-toast-container.component.html',
                    styleUrls: ['./toastify-toast-container.component.scss'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ToastService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { position: [{
                type: Input
            }], transition: [{
                type: Input
            }], autoClose: [{
                type: Input
            }], hideProgressBar: [{
                type: Input
            }], pauseOnHover: [{
                type: Input
            }], pauseOnVisibilityChange: [{
                type: Input
            }], closeOnClick: [{
                type: Input
            }], newestOnTop: [{
                type: Input
            }], preventDuplicates: [{
                type: Input
            }], iconLibrary: [{
                type: Input
            }] } });
var TransitionState;
(function (TransitionState) {
    TransitionState[TransitionState["entering"] = 0] = "entering";
    TransitionState[TransitionState["noTransition"] = 1] = "noTransition";
    TransitionState[TransitionState["exiting"] = 2] = "exiting";
})(TransitionState || (TransitionState = {}));
//# sourceMappingURL=data:application/json;base64,