import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener, Input, NgZone, Output, ViewChild, } from "@angular/core";
import { ToastType } from "../toast-type";
import { Toast } from "../toast";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class ToastifyToastComponent {
    constructor(_cd, _zone) {
        this._cd = _cd;
        this._zone = _zone;
        this.autoClose = 5000;
        this.hideProgressBar = false;
        this.pauseOnHover = true;
        this.pauseOnVisibilityChange = true;
        this.closeOnClick = true;
        this.dismissEvent = new EventEmitter();
        this.ToastType = ToastType;
        this.running = false;
    }
    ngOnInit() {
        this.autoCloseRemaining = this.autoClose;
        this.startTime = this.toast.time;
        this.toast.$resetToast.subscribe(() => this.resetToastTimer());
        // Do not start timer when toast is prompted while window is out of focus
        if (this.handleVisibilityChange && document.visibilityState === "visible") {
            this.startCloseTimer();
        }
        // Start progress bar animation
        this.triggerProgressBarAnimation();
    }
    triggerProgressBarAnimation() {
        // Cancel previous animlation to avoid leaks
        if (this._progressBarAnimation !== undefined) {
            cancelAnimationFrame(this._progressBarAnimation);
        }
        // Start animation
        const frame = () => {
            if (this.running) {
                const remainingTime = Math.max(0, this.expectedAutoDismissTime - new Date().getTime());
                const percentage = 100 - ((remainingTime / this.autoClose) * 100);
                this.progressBarCover.nativeElement.style.width = percentage + "%";
                if (percentage <= 0)
                    return;
            }
            this._progressBarAnimation = requestAnimationFrame(frame);
        };
        this._progressBarAnimation = requestAnimationFrame(frame);
    }
    ngOnDestroy() {
        var _a, _b;
        // Cancel animation
        if (this._progressBarAnimation) {
            cancelAnimationFrame(this._progressBarAnimation);
            this._progressBarAnimation = undefined;
        }
        // Clear auto close timeout
        this.clearTimerTimeout();
        // Complete all observables
        (_a = this.toast.$resetToast) === null || _a === void 0 ? void 0 : _a.complete();
        this.toast.$resetToast = null;
        (_b = this._$updateTimer) === null || _b === void 0 ? void 0 : _b.complete();
        this._$updateTimer = null;
    }
    startCloseTimer() {
        if (this.running || !this.autoClose) {
            return;
        }
        this.running = true;
        this.expectedAutoDismissTime =
            new Date().getTime() + this.autoCloseRemaining;
        this.autoDismissTimeout = this._zone.runOutsideAngular(() => setTimeout(() => {
            this._zone.run(() => {
                this.dismissEvent.emit();
                this._cd.markForCheck();
            });
        }, this.autoCloseRemaining));
    }
    pauseCloseTimer() {
        this.running = false;
        this.clearTimerTimeout();
        // Calculate the elapsed time, subtract remaining time
        this.pauseTime = new Date().getTime();
        const elapsed = this.pauseTime - this.startTime;
        this.autoCloseRemaining = this.autoClose - elapsed;
    }
    resetToastTimer() {
        this.clearTimerTimeout();
        this.running = false;
        this.startTime = new Date().getTime();
        this.autoCloseRemaining = this.autoClose;
        this.startCloseTimer();
    }
    clearTimerTimeout() {
        if (this.autoDismissTimeout !== undefined) {
            this.expectedAutoDismissTime = undefined;
            clearTimeout(this.autoDismissTimeout);
        }
    }
    handleDismissButtonAction() {
        if (this.closeOnClick) {
            return; // Let the other event handle the dismissal
        }
        this.clearTimerTimeout();
        this.dismissEvent.emit();
    }
    handleHostClick() {
        if (this.closeOnClick) {
            this.clearTimerTimeout();
            this.dismissEvent.emit();
        }
    }
    handleMouseEnter() {
        if (this.pauseOnHover) {
            this.pauseCloseTimer();
        }
    }
    handleMouseLeave() {
        if (this.pauseOnHover) {
            this.startCloseTimer();
            this.startTime = new Date().getTime() + (this.startTime - this.pauseTime);
        }
    }
    handleVisibilityChange() {
        if (!this.pauseOnVisibilityChange) {
            return;
        }
        if (document.visibilityState !== "visible") {
            this.pauseCloseTimer();
            this._cd.detectChanges();
        }
        else {
            this.startCloseTimer();
        }
    }
}
/** @nocollapse */ ToastifyToastComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ToastifyToastComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ToastifyToastComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ToastifyToastComponent, selector: "lib-toastify-toast", inputs: { autoClose: "autoClose", hideProgressBar: "hideProgressBar", pauseOnHover: "pauseOnHover", pauseOnVisibilityChange: "pauseOnVisibilityChange", closeOnClick: "closeOnClick", toast: "toast", iconLibrary: "iconLibrary" }, outputs: { dismissEvent: "dismissEvent" }, host: { listeners: { "click": "handleHostClick()", "mouseenter": "handleMouseEnter()", "mouseleave": "handleMouseLeave()", "document:visibilitychange": "handleVisibilityChange()" } }, viewQueries: [{ propertyName: "progressBar", first: true, predicate: ["progressBar"], descendants: true }, { propertyName: "progressBarCover", first: true, predicate: ["progressBarCover"], descendants: true }], ngImport: i0, template: "<div role=\"alert\" class=\"toast-body\">\n    <div class=\"icon-container\">\n        <span *ngIf=\"iconLibrary == 'material'\" [ngSwitch]=\"toast.type\">\n            <i class=\"material-icons\" *ngSwitchCase=\"ToastType.info\">info_outline</i>\n            <i class=\"material-icons\" *ngSwitchCase=\"ToastType.default\">info_outline</i>\n            <i class=\"material-icons\" *ngSwitchCase=\"ToastType.warning\">warning_outline</i>\n            <i class=\"material-icons\" *ngSwitchCase=\"ToastType.error\">error_outline</i>\n            <i class=\"material-icons\" *ngSwitchCase=\"ToastType.success\">done</i>\n        </span>\n        <span *ngIf=\"iconLibrary == 'font-awesome'\" [ngSwitch]=\"toast.type\">\n            <i *ngSwitchCase=\"ToastType.info\" class=\"fa fa-info\"></i>\n            <i *ngSwitchCase=\"ToastType.default\" class=\"fa fa-info\"></i>\n            <i *ngSwitchCase=\"ToastType.warning\" class=\"fa fa-exclamation-triangle\"></i>\n            <i *ngSwitchCase=\"ToastType.error\" class=\"fa fa-exclamation\"></i>\n            <i *ngSwitchCase=\"ToastType.success\" class=\"fa fa-check\"></i>\n        </span>\n    </div>\n    <div class=\"toast-container\">\n        <span>{{toast.message}}</span>\n    </div>\n</div>\n<button (click)=\"handleDismissButtonAction()\" class=\"close-button close-button--{{ToastType[toast.type]}}\" type=\"button\" aria-label=\"close\">\u2716</button>\n\n<div #progressBar *ngIf=\"!hideProgressBar\" class=\"progress-bar progress-bar&#45;&#45;{{ToastType[toast.type]}}\" style=\"opacity: 1;\"></div>\n<div #progressBarCover *ngIf=\"!hideProgressBar\" class=\"progress-bar-cover toast--{{ToastType[toast.type]}}\" [style.animation-duration]=\"this.autoClose + 'ms'\"  [style.animation-play-state]=\"running? 'running' : 'paused'\"></div>\n", styles: [".toast{position:relative;min-height:64px;box-sizing:border-box;margin-bottom:1rem;padding:8px;border-radius:1px;box-shadow:0 1px 10px 0 rgba(0,0,0,.1),0 2px 15px 0 rgba(0,0,0,.05);display:flex;justify-content:space-between;max-height:800px;overflow:hidden;font-family:sans-serif;cursor:pointer;direction:ltr}.toast--rtl{direction:rtl}.toast--default{background:#fff;color:#aaa}.toast--info{background:#3498db}.toast--success{background:#07bc0c}.toast--warning{background:#f1c40f}.toast--error{background:#e74c3c}.toast-body{margin:auto 0;flex:1}@media only screen and (max-width:480px){.toast{margin-bottom:0}}.close-button{color:#fff;font-weight:700;font-size:14px;background:transparent;outline:none;border:none;padding:0;cursor:pointer;opacity:.7;transition:.3s ease;align-self:flex-start}.close-button--default{color:#000;opacity:.3}.close-button:focus,.close-button:hover{opacity:1}.progress-bar-cover{right:0;z-index:100;direction:rtl}.progress-bar,.progress-bar-cover{position:absolute;bottom:0;width:100%;height:5px;transform-origin:left}.progress-bar{left:0;z-index:99;opacity:.7;background-color:hsla(0,0%,100%,.7)}.progress-bar--controlled{transition:transform .2s}.progress-bar--rtl{right:0;left:auto;transform-origin:right}.progress-bar--default{background:linear-gradient(90deg,#4cd964,#5ac8fa,#007aff,#34aadc,#5856d6,#ff2d55)}.icon-container,.toast-body{vertical-align:middle}.icon-container{display:inline-block;width:25px}.icon-container span{margin-right:.5rem;display:inline-block;text-align:center;width:20px}.icon-container span i{vertical-align:middle}.fa,.material-icons{font-size:18px}.toast-container{display:inline-block;width:calc(100% - 25px);vertical-align:middle}"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ToastifyToastComponent, decorators: [{
            type: Component,
            args: [{
                    // tslint:disable-next-line:component-selector
                    selector: "lib-toastify-toast",
                    templateUrl: "./toastify-toast.component.html",
                    styleUrls: ["./toastify-toast.component.scss"],
                    // changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, propDecorators: { progressBar: [{
                type: ViewChild,
                args: ["progressBar"]
            }], progressBarCover: [{
                type: ViewChild,
                args: ["progressBarCover"]
            }], autoClose: [{
                type: Input
            }], hideProgressBar: [{
                type: Input
            }], pauseOnHover: [{
                type: Input
            }], pauseOnVisibilityChange: [{
                type: Input
            }], closeOnClick: [{
                type: Input
            }], toast: [{
                type: Input
            }], iconLibrary: [{
                type: Input
            }], dismissEvent: [{
                type: Output
            }], handleHostClick: [{
                type: HostListener,
                args: ["click"]
            }], handleMouseEnter: [{
                type: HostListener,
                args: ["mouseenter"]
            }], handleMouseLeave: [{
                type: HostListener,
                args: ["mouseleave"]
            }], handleVisibilityChange: [{
                type: HostListener,
                args: ["document:visibilitychange"]
            }] } });
//# sourceMappingURL=data:application/json;base64,