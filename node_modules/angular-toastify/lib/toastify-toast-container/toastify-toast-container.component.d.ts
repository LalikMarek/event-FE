import { OnInit, ChangeDetectorRef, OnChanges } from '@angular/core';
import { ToastService } from '../toast.service';
import { Toast } from '../toast';
import { ToastType } from '../toast-type';
import * as i0 from "@angular/core";
export declare class ToastifyToastContainerComponent implements OnInit, OnChanges {
    private _toastService;
    private _cd;
    private readonly transitionDurations;
    position: 'top-left' | 'top-right' | 'bottom-right' | 'bottom-left';
    transition: 'bounce' | 'slide' | 'zoom' | 'flip';
    autoClose: number;
    hideProgressBar: boolean;
    pauseOnHover: boolean;
    pauseOnVisibilityChange: boolean;
    closeOnClick: boolean;
    newestOnTop: boolean;
    preventDuplicates: boolean;
    iconLibrary: 'material' | 'font-awesome' | 'none';
    ToastType: typeof ToastType;
    toasts: Toast[];
    toastTransitionDict: {};
    constructor(_toastService: ToastService, _cd: ChangeDetectorRef);
    ngOnChanges(): void;
    dismiss(toast: Toast): void;
    getClass(toast: Toast): string;
    ngOnInit(): void;
    handleToastAddedEvent(toast: Toast): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ToastifyToastContainerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ToastifyToastContainerComponent, "lib-toastify-toast-container", never, { "position": "position"; "transition": "transition"; "autoClose": "autoClose"; "hideProgressBar": "hideProgressBar"; "pauseOnHover": "pauseOnHover"; "pauseOnVisibilityChange": "pauseOnVisibilityChange"; "closeOnClick": "closeOnClick"; "newestOnTop": "newestOnTop"; "preventDuplicates": "preventDuplicates"; "iconLibrary": "iconLibrary"; }, {}, never, never>;
}
